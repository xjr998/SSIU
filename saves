"""
*******U-Net******
"""

class conv_block(nn.Module):
    def __init__(self,ch_in,ch_out):
        super(conv_block,self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(ch_in, ch_out, kernel_size=3,stride=1,padding=1,bias=True),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True),
            nn.Conv2d(ch_out, ch_out, kernel_size=3,stride=1,padding=1,bias=True),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True)
        )


    def forward(self,x):
        x = self.conv(x)
        return x




class up_conv(nn.Module):
    def __init__(self,ch_in,ch_out):
        super(up_conv,self).__init__()
        self.up = nn.Sequential(
            nn.Upsample(scale_factor=2),
            nn.Conv2d(ch_in,ch_out,kernel_size=3,stride=1,padding=1,bias=True),
		    nn.BatchNorm2d(ch_out),
			nn.ReLU(inplace=True)
        )

    def forward(self,x):
        x = self.up(x)
        return x

class conve(nn.Module):
    def __init__(self,ch_in,ch_out):
        super(conve,self).__init__()
        self.up = nn.Sequential(
            nn.Conv2d(ch_in,ch_out,kernel_size=3,stride=1,padding=1,bias=True),
		    nn.BatchNorm2d(ch_out),
			nn.ReLU(inplace=True),
            nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1, bias=True),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True)
        )

    def forward(self,x):
        x = self.up(x)
        return x


class U_Net(nn.Module):
    def __init__(self,img_ch=1,output_ch=1):
        super(U_Net,self).__init__()

        self.Maxpool = nn.MaxPool2d(kernel_size=2,stride=2)
        self.bf = conve(ch_in=img_ch, ch_out=64)
        self.Conv1 = conv_block(ch_in=64, ch_out=64)
        self.Conv2 = conv_block(ch_in=64,ch_out=128)
        self.Conv3 = conv_block(ch_in=128, ch_out=256)
        self.Conv4 = conv_block(ch_in=256, ch_out=512)
        self.Conv5 = conv_block(ch_in=512, ch_out=1024)
        self.Up5 = up_conv(ch_in=1024,ch_out=512)
        self.Up_conv5 = conv_block(ch_in=1024, ch_out=512)
        self.cf = conve(ch_in=1024, ch_out=1024)
        self.Up4 = up_conv(ch_in=512,ch_out=256)
        self.Up_conv4 = conv_block(ch_in=512, ch_out=256)

        self.Up3 = up_conv(ch_in=256,ch_out=128)
        self.Up_conv3 = conv_block(ch_in=256, ch_out=128)

        self.Up2 = up_conv(ch_in=128,ch_out=64)
        self.Up_conv2 = conv_block(ch_in=128, ch_out=64)
        self.af = conve(ch_in=64, ch_out=64)
        self.Conv_1x1 = nn.Conv2d(64,output_ch,kernel_size=1,stride=1,padding=0)

        def _initialize_weights(self):
            for m in self.modules():
                if isinstance(m, nn.Conv2d):
                    nn.init.normal_(m.weight, std=0.001)

    def forward(self,x):
        # encoding path
        x1 = self.bf(x)
        x1 = self.Conv1(x1)
        x2 = self.Maxpool(x1)
        x2 = self.Conv2(x2)

        x3 = self.Maxpool(x2)
        x3 = self.Conv3(x3)

        x4 = self.Maxpool(x3)
        x4 = self.Conv4(x4)

        x5 = self.Maxpool(x4)
        x5 = self.Conv5(x5)
        x5 = self.cf(x5)
        # # decoding + concat path
        d5 = self.Up5(x5)
        d5 = torch.cat((x4,d5),dim=1)
        d5 = self.Up_conv5(d5)

        d4 = self.Up4(d5)
        d4 = torch.cat((x3,d4),dim=1)
        d4 = self.Up_conv4(d4)

        d3 = self.Up3(d4)
        d3 = torch.cat((x2,d3),dim=1)
        d3 = self.Up_conv3(d3)

        d2 = self.Up2(d3)
        d2 = torch.cat((x1,d2),dim=1)
        d2 = self.Up_conv2(d2)

        d1 = self.Conv_1x1(d2)

        d1 = d1 + x


        return d1




















"""
*******U-Net******
"""

class conv_block(nn.Module):
    def __init__(self,ch_in,ch_out):
        super(conv_block,self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(ch_in, ch_out, kernel_size=3,stride=1,padding=1,bias=True),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True),
            nn.Conv2d(ch_out, ch_out, kernel_size=3,stride=1,padding=1,bias=True),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True)
        )


    def forward(self,x):
        x = self.conv(x)
        return x




class up_conv(nn.Module):
    def __init__(self,ch_in,ch_out):
        super(up_conv,self).__init__()
        self.up = nn.Sequential(
            nn.Upsample(scale_factor=2),
            nn.Conv2d(ch_in,ch_out,kernel_size=3,stride=1,padding=1,bias=True),
		    nn.BatchNorm2d(ch_out),
			nn.ReLU(inplace=True)
        )

    def forward(self,x):
        x = self.up(x)
        return x

class conve(nn.Module):
    def __init__(self,ch_in,ch_out):
        super(conve,self).__init__()
        self.up = nn.Sequential(
            nn.Conv2d(ch_in,ch_out,kernel_size=3,stride=1,padding=1,bias=True),
		    nn.BatchNorm2d(ch_out),
			nn.ReLU(inplace=True),
            nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1, bias=True),
            nn.BatchNorm2d(ch_out)
        )

    def forward(self,x):
        x = self.up(x)
        return x


class U_Net(nn.Module):
    def __init__(self,img_ch=1,output_ch=1):
        super(U_Net,self).__init__()

        self.Maxpool = nn.MaxPool2d(kernel_size=2,stride=2)

        self.Conv11 = conv_block(ch_in=img_ch, ch_out=64)
        self.Conv21 = conv_block(ch_in=64, ch_out=128)
        self.Conv31 = conv_block(ch_in=128, ch_out=256)

        self.Up31 = up_conv(ch_in=256, ch_out=128)
        self.Up_conv31 = conv_block(ch_in=256, ch_out=128)

        self.Up21 = up_conv(ch_in=128, ch_out=64)
        self.Up_conv21 = conv_block(ch_in=128, ch_out=64)
        self.Conv_1x11 = nn.Conv2d(64, output_ch, kernel_size=1, stride=1, padding=0)

        self.Conv12 = conv_block(ch_in=img_ch, ch_out=64)
        self.Conv22 = conv_block(ch_in=64, ch_out=128)
        self.Conv32 = conv_block(ch_in=128, ch_out=256)

        self.Up32 = up_conv(ch_in=256, ch_out=128)
        self.Up_conv32 = conv_block(ch_in=256, ch_out=128)

        self.Up22 = up_conv(ch_in=128, ch_out=64)
        self.Up_conv22 = conv_block(ch_in=128, ch_out=64)
        self.Conv_1x12 = nn.Conv2d(64, output_ch, kernel_size=1, stride=1, padding=0)

        self.Conv13 = conv_block(ch_in=img_ch, ch_out=64)
        self.Conv23 = conv_block(ch_in=64, ch_out=128)
        self.Conv33 = conv_block(ch_in=128, ch_out=256)

        self.Up33 = up_conv(ch_in=256, ch_out=128)
        self.Up_conv33 = conv_block(ch_in=256, ch_out=128)

        self.Up23 = up_conv(ch_in=128, ch_out=64)
        self.Up_conv23 = conv_block(ch_in=128, ch_out=64)
        self.Conv_1x13 = nn.Conv2d(64, output_ch, kernel_size=1, stride=1, padding=0)


        def _initialize_weights(self):
            for m in self.modules():
                if isinstance(m, nn.Conv2d):
                    nn.init.normal_(m.weight, std=0.001)



    def forward(self,x):
        # encoding path

        x1 = self.Conv11(x)
        x2 = self.Maxpool(x1)
        x2 = self.Conv21(x2)
        x3 = self.Maxpool(x2)
        x3 = self.Conv31(x3)
        d3 = self.Up31(x3)
        d3 = torch.cat((x2, d3), dim=1)
        d3 = self.Up_conv31(d3)
        d2 = self.Up21(d3)
        d2 = torch.cat((x1, d2), dim=1)
        d2 = self.Up_conv21(d2)
        d1 = self.Conv_1x11(d2)
        d1 = d1 + x

        x1 = self.Conv12(x)
        x2 = self.Maxpool(x1)
        x2 = self.Conv22(x2)
        x3 = self.Maxpool(x2)
        x3 = self.Conv32(x3)
        d3 = self.Up32(x3)
        d3 = torch.cat((x2, d3), dim=1)
        d3 = self.Up_conv32(d3)
        d2 = self.Up22(d3)
        d2 = torch.cat((x1, d2), dim=1)
        d2 = self.Up_conv22(d2)
        d1 = self.Conv_1x12(d2)
        d1 = d1 + x

        x1 = self.Conv13(x)
        x2 = self.Maxpool(x1)
        x2 = self.Conv23(x2)
        x3 = self.Maxpool(x2)
        x3 = self.Conv33(x3)
        d3 = self.Up33(x3)
        d3 = torch.cat((x2, d3), dim=1)
        d3 = self.Up_conv33(d3)
        d2 = self.Up23(d3)
        d2 = torch.cat((x1, d2), dim=1)
        d2 = self.Up_conv23(d2)
        d1 = self.Conv_1x13(d2)
        d1 = d1 + x



        return d1
